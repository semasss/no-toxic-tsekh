---
import DownloadButton from '../components/DownloadButton.astro';
import ProgressOverlay from '../components/ProgressOverlay.astro';
import '../styles/global.css';
---

<!DOCTYPE html>
<html lang="ru">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Ваше видео - Я отменяю токсик</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg">
  <link rel="alternate icon" href="/favicon.ico">
  <meta name="cloudflare-analytics" content="token=__YOUR_TOKEN__">
</head>
<body class="bg-[#77FF00] min-h-screen flex flex-col items-center justify-center font-sans p-4">
  <div class="relative aspect-[2/3] rounded-[24px] overflow-hidden w-11/12 max-w-md mx-auto">
    <video
      id="main-video"
      autoplay
      muted
      playsinline
      loop
      class="w-full h-full object-cover"
      preload="metadata"
    >
      Ваш браузер не поддерживает видео.
    </video>

    <div class="absolute inset-0 flex items-center justify-center text-center overlay-text">
      <div id="overlay-text" class="text-white text-2xl font-bold px-4 drop-shadow-lg">
        «Д-в, ЦЕХ и — отменили токсик. Смоленск. 2025.»
      </div>
    </div>
  </div>

  <DownloadButton />
  <ProgressOverlay />

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const video = document.getElementById('main-video');
      const overlayText = document.getElementById('overlay-text');
      const downloadBtn = document.getElementById('download-btn');

      if (!video || !overlayText) return;

      // Получаем данные из URL параметров
      const urlParams = new URLSearchParams(window.location.search);
      const gender = urlParams.get('gender');
      const userName = urlParams.get('name');

      // Если нет данных, перенаправляем на главную
      if (!gender || !userName) {
        // eslint-disable-next-line no-restricted-globals
        location.href = '/';
        return;
      }

      // Обновляем текст оверлея с именем пользователя
      const text = `«Д-в, ЦЕХ и ${userName} отменили токсик. Смоленск. 2025.»`;
      overlayText.textContent = text;

      // Формируем правильные URL для видео с учетом BASE_URL
      const boyVideoSrc = new URL('/videos/boy.mp4', import.meta.env.BASE_URL).href;
      const girlVideoSrc = new URL('/videos/girl.mp4', import.meta.env.BASE_URL).href;
      
      // Выбираем видео на основе пола
      const videoSrc = gender === 'male' ? boyVideoSrc : girlVideoSrc;
      const videoFile = gender === 'male' ? 'boy.mp4' : 'girl.mp4';
      
      // eslint-disable-next-line no-console
      console.log(`Загружаем видео: ${videoFile} для пола: ${gender}`);
      // eslint-disable-next-line no-console
      console.log(`URL видео: ${videoSrc}`);
      // eslint-disable-next-line no-console
      console.log(`BASE_URL: ${import.meta.env.BASE_URL}`);
      
      // Проверяем поддержку MP4 перед загрузкой
      const canPlayMp4 = video.canPlayType('video/mp4; codecs="avc1.42E01E"');
      const canPlayMp4Basic = video.canPlayType('video/mp4');
      
      // eslint-disable-next-line no-console
      console.log('Поддержка MP4 с кодеком H.264:', canPlayMp4);
      // eslint-disable-next-line no-console
      console.log('Поддержка MP4 базовая:', canPlayMp4Basic);
      
      if (canPlayMp4Basic === '' && canPlayMp4 === '') {
        // eslint-disable-next-line no-console
        console.warn('Браузер не поддерживает MP4 видео');
        showVideoPlaceholder();
        return;
      }
      
      // Устанавливаем источник видео
      video.src = videoSrc;
      
      // Принудительная загрузка
      video.load();

      // Делаем кнопку неактивной по умолчанию
      if (downloadBtn) {
        downloadBtn.disabled = true;
        downloadBtn.classList.add('opacity-50', 'cursor-not-allowed');
      }

      // Обработка успешной загрузки видео
      video.addEventListener('loadeddata', () => {
        // eslint-disable-next-line no-console
        console.log('Видео успешно загружено');
        
        // Активируем кнопку
        if (downloadBtn) {
          downloadBtn.disabled = false;
          downloadBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      });

      // Обработка ошибок загрузки видео
      video.addEventListener('error', (e) => {
        // eslint-disable-next-line no-console
        console.error('Ошибка загрузки видео:', e);
        console.error('Код ошибки:', video.error?.code);
        console.error('Сообщение ошибки:', video.error?.message);
        
        // Детальная диагностика ошибки
        const errorCode = video.error?.code;
        let errorDescription = 'Неизвестная ошибка';
        
        switch (errorCode) {
          case 1:
            errorDescription = 'MEDIA_ERR_ABORTED: Загрузка прервана пользователем';
            break;
          case 2:
            errorDescription = 'MEDIA_ERR_NETWORK: Ошибка сети при загрузке';
            break;
          case 3:
            errorDescription = 'MEDIA_ERR_DECODE: Ошибка декодирования видео';
            break;
          case 4:
            errorDescription = 'MEDIA_ERR_SRC_NOT_SUPPORTED: Неподдерживаемый формат';
            break;
        }
        
        // eslint-disable-next-line no-console
        console.error('Описание ошибки:', errorDescription);
        
        // Пробуем альтернативный способ загрузки
        if (errorCode === 4) {
          // eslint-disable-next-line no-console
          console.log('Пробуем альтернативную загрузку через Blob URL...');
          tryAlternativeVideoLoad(videoFile);
        } else {
          showVideoPlaceholder();
        }
      });

      // Обработка начала загрузки
      video.addEventListener('loadstart', () => {
        // eslint-disable-next-line no-console
        console.log('Начало загрузки видео');
      });

      // Обработка прогресса загрузки
      video.addEventListener('progress', () => {
        // eslint-disable-next-line no-console
        console.log('Прогресс загрузки видео');
      });

      // Альтернативная загрузка видео через fetch
      async function tryAlternativeVideoLoad(videoFile) {
        try {
          // eslint-disable-next-line no-console
          console.log('Загружаем видео через fetch...');
          
          // Используем правильный URL с BASE_URL
          const videoUrl = new URL(`/videos/${videoFile}`, import.meta.env.BASE_URL).href;
          
          const response = await fetch(videoUrl, {
            headers: {
              'Accept': 'video/mp4,video/*,*/*'
            }
          });
          
          // eslint-disable-next-line no-console
          console.log('Fetch ответ:', response.status, response.statusText);
          // eslint-disable-next-line no-console
          console.log('Content-Type:', response.headers.get('content-type'));
          
          if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
          
          const contentType = response.headers.get('content-type');
          
          // Валидируем что получили видео, а не HTML
          if (!contentType || (!contentType.includes('video') && !contentType.includes('application/octet-stream'))) {
            throw new Error(`Неверный Content-Type: ${contentType}. Ожидался video/mp4 или video/*`);
          }
          
          const blob = await response.blob();
          
          // eslint-disable-next-line no-console
          console.log('Blob создан:', blob.size, 'bytes, тип:', blob.type);
          
          // Дополнительная проверка размера файла
          if (blob.size < 1000) {
            throw new Error(`Файл слишком маленький: ${blob.size} bytes. Возможно это не видео.`);
          }
          
          const blobUrl = URL.createObjectURL(blob);
          
          // eslint-disable-next-line no-console
          console.log('Видео загружено как Blob, устанавливаем URL:', blobUrl);
          
          // Устанавливаем Blob URL
          video.src = blobUrl;
          video.load();
          
          // Очищаем URL после использования
          video.addEventListener('loadeddata', () => {
            URL.revokeObjectURL(blobUrl);
          }, { once: true });
          
        } catch (error) {
          // eslint-disable-next-line no-console
          console.error('Ошибка альтернативной загрузки:', error);
          
          // Пробуем прямую ссылку с кэш-бастингом
          tryDirectVideoLoad(videoFile);
        }
      }

      // Прямая загрузка с кэш-бастингом
      function tryDirectVideoLoad(videoFile) {
        // eslint-disable-next-line no-console
        console.log('Пробуем прямую загрузку с кэш-бастингом...');
        
        const timestamp = Date.now();
        const videoUrl = new URL(`/videos/${videoFile}?v=${timestamp}`, import.meta.env.BASE_URL).href;
        video.src = videoUrl;
        video.load();
        
        // Если и это не работает, показываем заглушку
        setTimeout(() => {
          if (video.networkState === video.NETWORK_NO_SOURCE) {
            // eslint-disable-next-line no-console
            console.error('Все методы загрузки видео не сработали');
            showVideoPlaceholder();
          }
        }, 3000);
      }

      // Функция показа заглушки
      function showVideoPlaceholder() {
        const bgColor = gender === 'male' ? '#3B82F6' : '#EC4899'; // Синий для мужчин, розовый для женщин
        
        video.style.backgroundColor = bgColor;
        video.style.display = 'flex';
        video.style.alignItems = 'center';
        video.style.justifyContent = 'center';
        video.innerHTML = `
          <div class="text-white text-center p-4">
            <div class="text-4xl mb-4">${gender === 'male' ? '👨' : '👩'}</div>
            <div class="text-lg mb-2">Видео временно недоступно</div>
            <div class="text-sm opacity-75">Попробуйте обновить страницу</div>
          </div>
        `;
        
        // Активируем кнопку даже при ошибке видео
        if (downloadBtn) {
          downloadBtn.disabled = false;
          downloadBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }

      // Проверяем поддержку видео
      if (!video.canPlayType('video/webm') && !video.canPlayType('video/mp4')) {
        // eslint-disable-next-line no-console
        console.warn('Браузер не поддерживает WebM или MP4 видео');
        showVideoPlaceholder();
      }

      // Таймаут для активации кнопки если видео не загрузилось
      setTimeout(() => {
        if (downloadBtn && downloadBtn.disabled) {
          // eslint-disable-next-line no-console
          console.log('Активируем кнопку по таймауту');
          downloadBtn.disabled = false;
          downloadBtn.classList.remove('opacity-50', 'cursor-not-allowed');
        }
      }, 5000); // 5 секунд
    });
  </script>
</body>
</html>
